#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define NAME_LEN   60    
#define AUTHOR_LEN 60  
#define BOOK_FILE "books.txt" 

typedef struct book{
  int    number;//编号 
  char  BookName[NAME_LEN];//书名 
  double  price;//价格 
  char    author[AUTHOR_LEN];//作者 
  int  exist;//借阅状态 
}BOOK;
struct node
{
  BOOK book;
  struct node* next;
};
void Menu(struct node *head);// 显示功能菜单  
void addBook(struct node *head);// 添加图书信息
void WatchBookList(struct node *head);// 查看所有图书信息   
void deleteBook(struct node *head);// 根据图书ID删除图书信息   
void updateBook(struct node *head);// 根据图书ID修改图书信息    
void bringBook(struct node *head);// 借书  
void returnBook(struct node *head);// 还书  
struct node* createBookNode(BOOK *book);
struct node* insertBookNode(struct node* head, BOOK *book);
struct node* createBookList();
void freeBookList(struct node* head);
struct node* numberFind(struct node* head, int number);
int deleteBookListById(struct node* head, int number);
int shujishumu(struct node* head);
void printList(struct node* head);
void saveFile(struct node* head);
void readBookListFromFile(struct node* head);
void error(const char* err);
int Land();
int main() {
  struct node* list = createBookList(); 
  // 先全部读取所有书本信息
  readBookListFromFile(list); 
  // 显示功能菜单 
  Menu(list);    
  char a[10];  
  if(Land()==1){
  while (1) {
    printf("\n请输出0-6,回车结束\n");
    if (fgets(a, 10, stdin) != NULL) {  // 按行读取，0-6字符表示功能
      switch (a[0]) {
      case '0':    // 退出程序 
        freeBookList(list);
        printf("ByeBye,下次再见!\n");
        exit(0);
      case '1':    // 添加图书
        addBook(list);
        break;
      case '2':    // 查看图书
        WatchBookList(list);
        break;
      case '3':    // 删除图书
        deleteBook(list);
        break;
      case '4':    // 修改图书
        updateBook(list);
        break;
      case '5':    // 借书
        bringBook(list);
        break;
      case '6':    // 还书 
        returnBook(list);
        break;
      default:
        printf("请重新输入正确的功能数字0-6!\n");
      }
    }
  }
}
  return 0;
}

// 创建图书结点
struct node* createBookNode(BOOK *book)
{
  struct node* p = (struct node*)calloc(1,sizeof(struct node));
  BOOK *b;
  if(p != NULL)
  {
    if(book != NULL)
    {
      b = &(p->book);
      b->number = book->number;
      strcpy(b->BookName, book->BookName);
      b->price = book->price;
      strcpy(b->author, book->author);
      b->exist = book->exist;
    }
    p->next = NULL;
  }
  return p;
}  
struct node* insertBookNode(struct node* head, BOOK *book)
{
  if(head != NULL)
  {
    struct node* node = createBookNode(book);
    BOOK *b = &(node->book);
    if(node != NULL)
    {
      struct node* p = head;
      while(p->next != NULL)
        p = p->next;


      p->next = node;
      return node;
    }
  }
  return NULL;
}
struct node* createBookList()
{
  // 创建头结点
  return createBookNode(NULL);
}
// 释放图书链表内存空间
void freeBookList(struct node* head)
{
  struct node* p = head;
  while(p != NULL)
  {
    head = p->next;
    free(p);
    p = head;
  }
}
struct node* numberFind(struct node* head, int number)
{
  
  struct node *p = NULL;
  if(head != NULL)
  {
    p = head->next;
    while(p != NULL)
    {
      if(p->book.number == number)
        break;
      p = p->next;
    }
  }
  return p;
} 
int deleteBookListById(struct node* head, int number)
{
  // p保存当前结点，pfront保存前一个结点 
  struct node *p = NULL, *pfront = NULL;
  // 返回结果0或1
  int status = 0; 
  if(head != NULL)
  {
    pfront = head;
    p = head->next;
    while(p != NULL)
    {
      if(p->book.number == number)
      {
        pfront->next = p->next;
        free(p);
        status = 1;        
        break;
      }
      pfront = p;
      p = p->next;
    }
  }
  return status;
} 
int shujishumu(struct node* head)//书籍数目获取 
{
  int n = 0;
  struct node *p = NULL;
  if(head != NULL)
  {
    p = head->next;
    while(p != NULL)
    {
      n++;
      p = p->next;
    }
  }
  return n;
}
// 打印出保存的图书信息
void printList(struct node* head)
{
  struct node* p = head->next;
  printf("图书编号                 书名     价格     作者 借阅状态\n");
  BOOK *b;
  while(p != NULL)
  {
    b = &(p->book);
    printf("%8d %20s %8.2f %8s %8s\n", b->number, b->BookName, b->price,b->author, (b->exist==1 ? "1-未借出":"0-已借出")) ;
    p = p->next;
  }
}
// 文件保存图书信息
void saveFile(struct node* head)
{
  if(head != NULL)
  {
    struct node *p = head->next;
    FILE* fp = fopen(BOOK_FILE, "w+");
    if(fp != NULL)
    {
      while(p != NULL)
      {
        fprintf(fp, "%d %s %f %s %d\n", (p->book).number,(p->book).BookName, (p->book).price, (p->book).author,(p->book).exist);
        p = p->next;
      }
      fclose(fp);
    }else {
      error("打开book.txt文件失败，请检查!\n");
    }  
  }
} 
// 从文件读取图书信息
void readBookListFromFile(struct node* head)
{
  FILE* fp = fopen(BOOK_FILE, "a+");
  BOOK book;
  if (fp != NULL) {
    while (fscanf(fp, "%d%s%lf%s%d", &book.number, book.BookName, &book.price, book.author, &book.exist) != EOF) {
    insertBookNode(head, &book);
    }
    fclose(fp);
  }else {
    error("打开book.txt文件失败，请检查!\n");
  }
} 
// 显示出错信息，并退出程序
void error(const char* err)
{
  printf(err);
  exit(-1);
 } 
void Menu(struct node *head) {
  printf("----------欢迎使用xupt图书管理系统----------\n");
  printf("当前系统共有图书%d本！\n", shujishumu(head));
  printf("系统提供以下功能：\n");
  printf("1:添加图书\n");
  printf("2:查看图书\n");
  printf("3:删除图书\n");
  printf("4:修改图书\n");
  printf("5:借阅图书\n");
  printf("6:归还图书\n");
  printf("0:退出系统\n\n");
  printf("----------欢迎使用xupt图书管理系统----------\n"); 
}
void addBook(struct node *head) {
  printf("请按提示添加图书信息：\n");
  printf("依次输入编号 书名 价格 作者信息，以空格分隔:\n");
  char a[1024];
  BOOK book;
  if (fgets(a, 1024, stdin) != NULL && sscanf(a, "%d%s%lf%s", &book.number, book.BookName, &book.price, book.author) != EOF) {// 根据编号查找图书信息，若编号已存在，则无法增加 
    if (numberFind(head, book.number) != NULL)
      printf("该编号对应的图书信息已经存在，无法增加!\n");
    else {
      book.exist = 1;
      insertBookNode(head, &book);
      saveFile(head);
      printf("添加成功，当前共有%d本书!\n\n", shujishumu(head));
    }
  }
  else {
    error("输入有误，请重新添加!\n");
  }
}
void WatchBookList(struct node *head) {
  printList(head);
}
void deleteBook(struct node *head) {
  printf("请输入要删除的图书编号：");
  char a[1024];
  int number;
  if (fgets(a, 1024, stdin) != NULL && \
       sscanf(a, "%d", &number) != EOF) {
    if (deleteBookListById(head, number))
    {
      printf("该编号%d对应的图书信息删除成功!\n", number);
      
    }else
    {
      printf("该编号对应的图书信息不存在!\n");
    }
  }
  else {
    error("输入有误，请重新输入!\n");
  }
}
void updateBook(struct node *head) {
  printf("请输入要修改的图书编号：");
  char a[1024];
  int number = 0;  
  if (fgets(a, 1024, stdin) != NULL &&  \
      sscanf(a, "%d", &number) != EOF) {
    struct node *p = numberFind(head, number);
    if (p == NULL)
      printf("该编号对应的图书信息不存在!\n");
    else {
      printf("该编号对应的图书信息如下，请按照提示修改：\n");
      printf("图书编号                 书名     价格     作者 借阅状态\n");
      BOOK *book = &(p->book);
      printf("%8d %20s %8.2f %8s %8s\n\n",book->number, book->BookName, \
          book->price, book->author, (book->exist == 1 ? "未借出" : "已借出"));
      printf("依次输入修改后的书名、价格、作者信息，以空格分隔:\n");
      if (fgets(a, 1024, stdin) != NULL && sscanf(a, "%s%lf%s",\
          book->BookName, &book->price, book->author) != EOF) {
        saveFile(head);
        printf("修改成功，修改后的图书信息如下：\n");
        printf("图书编号                 书名     价格     作者 借阅状态\n");
        printf("%8d %20s %8.2f %8s %8s\n", book->number, book->BookName, book->price, \
          book->author, (book->exist == 1 ? "未借出" : "已借出"));
      }
      else {
        error("输入有误，请重新修改!\n");
      }
    }
  }
  else {
    error("输入有误，请重新输入!\n");
  }
}
void bringBook(struct node *head) {
  printf("请输入要借阅的图书编号：");
  char a[1024];
  int number = 0;  
  if (fgets(a, 1024, stdin) != NULL &&  \
      sscanf(a, "%d", &number) != EOF) { 
    struct node *p = numberFind(head, number);
    if (p == NULL)
      printf("该编号对应的图书信息不存在!\n");
    else {
      printf("该编号对应的图书信息如下，请按照提示修改：\n");
      printf("图书编号                 书名     价格     作者 借阅状态\n");
      BOOK *book = &(p->book);
      printf("%8d %20s %8.2f %8s %8s\n\n", book->number, book->BookName, \
          book->price, book->author, (book->exist == 1 ? "未借出" : "已借出"));
      if (book->exist == 0)
        printf("该编号对应的图书已借出,请归还后再借阅！\n");
      else {
        book->exist = 0;
        saveFile(head);
        printf("该编号对应的图书借阅成功！\n");
      }
    }
  }else {
    error("输入有误，请重新输入!\n");
  }
}
void returnBook(struct node *head) {
  printf("请输入要归还的图书编号：");
    char a[1024];
  int number = 0;  
  if (fgets(a, 1024, stdin) != NULL &&  \
      sscanf(a, "%d", &number) != EOF) {     
    struct node *p = numberFind(head, number);
    if (p == NULL)
      printf("该编号对应的图书信息不存在!\n");
    else {
      printf("该编号对应的图书信息如下，请按照提示修改：\n");
      printf("图书编号                 书名     价格     作者 借阅状态\n");
      BOOK *book = &(p->book);
      printf("%8d %20s %8.2f %8s %8s\n\n",  book->number, book->BookName, \
          book->price, book->author, (book->exist == 1 ? "未借出" : "已借出"));
      if (book->exist == 1)
        printf("该编号对应的图书未借出，无法归还！\n");
      else {
        book->exist = 1;
        saveFile(head);
        printf("该编号对应的图书归还成功！\n");
      }
    }
  }else {
    error("输入有误，请重新输入!\n");
  }
}
int Land(){//登陆函数
	printf("请输入登陆密码：");
	int Psssword;//初始化密码数据
	int a = 7777777;//设置的密码
	for (int n = 1; n <= 3; n++){
	scanf("%d", &Psssword);
		if (Psssword==a){
			printf("密码输入正确！\n");
			return 1;//登陆成功则返回1
		}
		else{
			printf("密码输入错误，请重新输入！\n",n);
		}
		if (n == 3){//登陆次数为3时 机会用尽 
		printf("机会已用完！\n");
		return -1;//机会用尽表示登陆失败，则返回-1
	}
  }
	return 0;
}
